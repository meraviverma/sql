1.CASE WHEN. So many great use cases!
2. Self joins. Common in product user behavior.
3. DISTINCT and GROUP BY
4. Left vs outer joins. Need I say more?
5. UNION. Rarely discussed but frequent.
6. SUM and COUNT. Nail the foundations!
7. Date-time manipulation. This will set you apart.
8. String formatting, substring.
9. Window functions like rank and row. Absolute gold!
10. Subqueries. Because they always show up...
11. HAVING vs WHERE. Do you know why?
12. LAG and LEAD. What do you use these for?
13. Understanding indexing. More intermediate.
14. Running totals. A fun use case to learn.
15. MAX and MIN. More common than anyone says!
10 new SQL practice questions for your weekend:
1. Why use the WITH statement? What does it help you do?
2. Can you use COUNT DISTINCT on two columns? How?
3. When does a full outer join actually make sense to use?
4. If you want to allow ties in ranking, RANK or DENSE RANK?
5. Can UNION and UNION ALL return the same results?
6. When is it a bad idea to use a subquery?
7. What is the best approach to doing a running total?
8. In what scenarios is the LEAD function useful?
9. If an error is thrown using SQL, where do you start looking?
10. Inner joining tables A and B returns 50 rows. Left join B to A returns 125 rows. What's going on here?

##########################################################################################################
		                       EMP Table and DEPT Table
##########################################################################################################
create table dept(
  deptno number(2,0),
  dname  varchar2(14),
  loc    varchar2(13),
  constraint pk_dept primary key (deptno)
);
create table emp(  
  empno    number(4,0),  
  ename    varchar2(10),  
  job      varchar2(9),  
  mgr      number(4,0),  
  hiredate date,  
  sal      number(7,2),  
  comm     number(7,2),  
  deptno   number(2,0),  
  constraint pk_emp primary key (empno),  
  constraint fk_deptno foreign key (deptno) references dept (deptno)  
);
insert into dept
values(10, 'ACCOUNTING', 'NEW YORK');
insert into dept
values(20, 'RESEARCH', 'DALLAS');
insert into dept
values(30, 'SALES', 'CHICAGO');
insert into dept
values(40, 'OPERATIONS', 'BOSTON');
insert into emp
values(
 7839, 'KING', 'PRESIDENT', null,
 to_date('17-11-1981','dd-mm-yyyy'),
 5000, null, 10
);
insert into emp
values(
 7698, 'BLAKE', 'MANAGER', 7839,
 to_date('1-5-1981','dd-mm-yyyy'),
 2850, null, 30
);
insert into emp
values(
 7782, 'CLARK', 'MANAGER', 7839,
 to_date('9-6-1981','dd-mm-yyyy'),
 2450, null, 10
);
insert into emp
values(
 7566, 'JONES', 'MANAGER', 7839,
 to_date('2-4-1981','dd-mm-yyyy'),
 2975, null, 20
);
insert into emp
values(
 7788, 'SCOTT', 'ANALYST', 7566,
 to_date('13-JUL-87','dd-mm-rr') - 85,
 3000, null, 20
);
insert into emp
values(
 7902, 'FORD', 'ANALYST', 7566,
 to_date('3-12-1981','dd-mm-yyyy'),
 3000, null, 20
);
insert into emp
values(
 7369, 'SMITH', 'CLERK', 7902,
 to_date('17-12-1980','dd-mm-yyyy'),
 800, null, 20
);
insert into emp
values(
 7499, 'ALLEN', 'SALESMAN', 7698,
 to_date('20-2-1981','dd-mm-yyyy'),
 1600, 300, 30
);
insert into emp
values(
 7521, 'WARD', 'SALESMAN', 7698,
 to_date('22-2-1981','dd-mm-yyyy'),
 1250, 500, 30
);
insert into emp
values(
 7654, 'MARTIN', 'SALESMAN', 7698,
 to_date('28-9-1981','dd-mm-yyyy'),
 1250, 1400, 30
);
insert into emp
values(
 7844, 'TURNER', 'SALESMAN', 7698,
 to_date('8-9-1981','dd-mm-yyyy'),
 1500, 0, 30
);
insert into emp
values(
 7876, 'ADAMS', 'CLERK', 7788,
 to_date('13-JUL-87', 'dd-mm-rr') - 51,
 1100, null, 20
);
insert into emp
values(
 7900, 'JAMES', 'CLERK', 7698,
 to_date('3-12-1981','dd-mm-yyyy'),
 950, null, 30
);
insert into emp
values(
 7934, 'MILLER', 'CLERK', 7782,
 to_date('23-1-1982','dd-mm-yyyy'),
 1300, null, 10
);

#####################################################################################################

										ORDER TABLE

######################################################################################################
CREATE TABLE orders(
   ORDER_DAY  VARCHAR(9)
  ,ORDER_ID   VARCHAR(2)
  ,PRODUCT_ID VARCHAR(2)
  ,QUANTITY   INTEGER 
  ,PRICE      INTEGER
);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('01-JUL-11','O1','P1',5,5);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('01-JUL-11','O2','P2',2,10);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('01-JUL-11','O3','P3',10,25);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('01-JUL-11','O4','P1',20,5);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('02-JUL-11','O5','P3',5,25);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('02-JUL-11','O6','P4',6,20);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('02-JUL-11','O7','P1',2,5);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('02-JUL-11','O8','P5',1,50);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('02-JUL-11','O9','P6',2,50);
INSERT INTO orders(ORDER_DAY,ORDER_ID,PRODUCT_ID,QUANTITY,PRICE) VALUES ('02-JUL-11','10','P2',4,10);
######################################################################################################

DDL:
1)create
2)drop
3)Alter
4)truncate

DML:
SELECT: Command to fetch data or values from the database
INSERT: Command to add new or fresh value to the database
UPDATE: Command to change or update the present/existing data to a newer value inside the database
DELETE: Command to remove or delete the values or data information from the databaseâ€™s current table
MERGE:  Command to merge two or more data tables inside a database.


sqlfiddle
----------------------------------------------------------------------------
								Day 1
----------------------------------------------------------------------------
Create table If Not Exists Employee (Id int, Salary int);
insert into Employee (Id, Salary) values ('1', '100');
insert into Employee (Id, Salary) values ('2', '200');
insert into Employee (Id, Salary) values ('3', '300');

Write a SQL query to get the second highest salary from the Employee table.

+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
For example, given the above Employee table, the query should return 200 as the second highest salary. If there is no second highest salary, then the query should return null.

+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+

# Write your MySQL query statement below
SELECT
    IFNULL(
      (SELECT DISTINCT Salary
       FROM Employee
       ORDER BY Salary DESC
        LIMIT 1 OFFSET 1),
    NULL) AS SecondHighestSalary;

----------------------------------------------------------------------------
								Day 2
----------------------------------------------------------------------------
UNION vs UNION ALL

CREATE TABLE t1 (
    id INT PRIMARY KEY
);

CREATE TABLE t2 (
    id INT PRIMARY KEY
);

INSERT INTO t1 VALUES (1),(2),(3);
INSERT INTO t2 VALUES (2),(3),(4);

select  * from t1
union all  select * from t2;


--------------------------------------------------------------------------------
								Day 3
--------------------------------------------------------------------------------
Joins
----------
CREATE TABLE t1 (
    id INT
);

CREATE TABLE t2 (
    id INT
);
INSERT INTO t1 VALUES (1),(2),(3),(5);
INSERT INTO t2 VALUES (1),(2),(4);

t1				t2
-----		----------
c1				c2
---			---------
1				1
2				2
3				4
5


Inner Join:
------------
select t1.id,t2.id from t1 join t2 on t1.id=t2.id;

c1		c2
----------------
1		2
1		2	

Left Outer Join
-----------------
select t1.id,t2.id from t1 left outer join t2 on t1.id=t2.id;

id	id
1	1
2	2
3	(null)
5	(null)

Right Outer join
-------------------
select t1.id,t2.id from t1 right outer join t2 on t1.id=t2.id;

id		id
1		1
2		2
(null)	4


Full Outer Join
---------------------
In mysql we don't have full outer join so using it in this way.

select t1.id,t2.id from t1 right outer join t2 on t1.id=t2.id;

id		id
1		1
2		2
(null)	4
3		(null)
5		(null)
					

--------------------------------------------------------------------------------
								Day 4
--------------------------------------------------------------------------------
CREATE TABLE t1 (
    id INT
);

CREATE TABLE t2 (
    id INT
);
INSERT INTO t2 VALUES (1),(1),(1),(1);
INSERT INTO t1 VALUES (1),(1);



Inner Join:
------------
select t1.id,t2.id from t1 join t2 on t1.id=t2.id;

c1		c2
----------------
1	1
1	1
1	1
1	1
1	1
1	1
1	1
1	1

Left Outer Join
-----------------
select t1.id,t2.id from t1 left outer join t2 on t1.id=t2.id;

c1		c2
----------------
1	1
1	1
1	1
1	1
1	1
1	1
1	1
1	1

Right Outer Join
---------------------
Right Outer join
-------------------
select t1.id,t2.id from t1 right outer join t2 on t1.id=t2.id;

c1		c2
----------------
1	1
1	1
1	1
1	1
1	1
1	1
1	1
1	1

Full Outer Join
---------------------

select t1.id,t2.id from t1 right outer join t2 on t1.id=t2.id
union ALL
select t1.id,t2.id from t1 left outer join t2 on t1.id=t2.id;

Output:
-----------
16 times one.

--------------------------------------------------------------------------------
								Day 5
--------------------------------------------------------------------------------
Arrange in Order as 1 0 1 0 1 0 1 0 1 0 
CREATE TABLE t1 (
    id INT
);
INSERT INTO t1 VALUES (1),(1),(1),(1),(0),(0),(0),(0);

Oracle:
CREATE TABLE t1 (
    id number(10)
);

insert into t1 values(1);
insert into t1 values(1);
insert into t1 values(1);
insert into t1 values(1);
insert into t1 values(0);
insert into t1 values(0);
insert into t1 values(0);
insert into t1 values(0);

ID
------------
1
1
1
1
0
0
0
0

Solution:
----------------
SELECT
    id,
    row_number() OVER (
        partition by id ORDER BY id
    ) my_rank
FROM
    t1 order by my_rank,id desc;
	
ID	MY_RANK
--------------
1	1
0	1
1	2
0	2
1	3
0	3
1	4
0	4

-----------------------------------------------------------------------------------------
									DAY 6
------------------------------------------------------------------------------------------
| ORDER_DAY | ORDER_ID | PRODUCT_ID | QUANTITY | PRICE |
|-----------|----------|------------|----------|-------|
| 01-JUL-11 |       O1 |         P1 |        5 |     5 |
| 01-JUL-11 |       O2 |         P2 |        2 |    10 |
| 01-JUL-11 |       O3 |         P3 |       10 |    25 |
| 01-JUL-11 |       O4 |         P1 |       20 |     5 |
| 02-JUL-11 |       O5 |         P3 |        5 |    25 |
| 02-JUL-11 |       O6 |         P4 |        6 |    20 |
| 02-JUL-11 |       O7 |         P1 |        2 |     5 |
| 02-JUL-11 |       O8 |         P5 |        1 |    50 |
| 02-JUL-11 |       O9 |         P6 |        2 |    50 |
| 02-JUL-11 |       10 |         P2 |        4 |    10 |

Q)Get me highest sold Products (Qty* Price) on both days
------------------------------------------------------
Desired output :

DATE      PRODUCT_ID SOLD_AMOUNT
01-JUL-11      P3        250
02-JUL-11      P3        125


select product_id,count(product_id) over(partition by product_id order by product_id) as order_p
from orders order by order_p ;	

Q: Get me highest sold Products (Qty* Price) on both days
---------------------------------------------------------
Desired output :

DATE      PRODUCT_ID SOLD_AMOUNT
01-JUL-11      P3        250
02-JUL-11      P3        125
								

select order_day, product_id, totalsale
from (select order_day,
           product_id,
           nvl(QUANTITY, 0) * PRICE as totalsale,
           dense_rank() over(partition by ORDER_DAY order by(nvl(QUANTITY, 0) * PRICE) desc) as maxsum
      from orders )
where maxsum = 1;

ORDER_DAY	PRODUCT_ID	TOTALSALE
01-JUL-11	P3	250
02-JUL-11	P3	125		

-----------------------------------------------------------------------------------------
									DAY 7
------------------------------------------------------------------------------------------
CREATE TABLE t1 (
    id INT
);
CREATE TABLE t2 (
    id INT
);

INSERT INTO t1 VALUES (1),(1),(1),(2),(null);

INSERT INTO t2 VALUES (1),(1),(2),(3),(null);

id
-----
1
1
2
3
(null)

id
1
1
1
2
(null)

select t1.id,t2.id from t1 left outer join t2 on t1.id=t2.id;
------------------------------------------------------------------						
id	id
1	1
1	1
1	1
1	1
1	1
1	1
2	2
(null)	(null)	

select t1.id,t2.id from t1 right outer join t2 on t1.id=t2.id;
------------------------------------------------------------------
id	id
1	1
1	1
1	1
1	1
1	1
1	1
2	2
(null)	3
(null)	(null)

-----------------------------------------------------------------------------------------
									DAY 8
------------------------------------------------------------------------------------------
Get combination of matches between the team

CREATE TABLE t1 (
    name varchar(20)
);

INSERT INTO t1 VALUES ("India"),("Pakistan"),("Aus"),("New Zealand"),("England");

Order By Name:
-------------------
select concat(ab.name," vs ",ac.name) from t1 ab,t1 ac where ab.name < ac.name order by ab.name;

Order By name with India coming as first
----------------------------------------------
select concat(ab.name," vs ",ac.name) from t1 ab,t1 ac where ab.name < ac.name 
order by 
case when ab.name = 'India' then 1 else 2 end, ab.name;	


---------------------------------------------------------------------------------------
								Day 9
---------------------------------------------------------------------------------------
CREATE TABLE t1 (
    device_id int,
    location varchar(20)
);
INSERT INTO t1 VALUES (12,"Bangalore"),(12,"Bangalore"),(12,"Bangalore"),(12,"Bangalore"),(12,"Housar"),(12,"Housar"),
(13,"Hyderabad"),(13,"Hyderabad"),(13,"Secundarabad"),(13,"Secundarabad"),(13,"Secundarabad");

Oracle:
---------
CREATE TABLE t1 (
    device_id integer,
    location varchar(20)
);
INSERT INTO t1 VALUES (12,'Bangalore');
INSERT INTO t1 VALUES(12,'Bangalore');
INSERT INTO t1 VALUES(12,'Bangalore');
INSERT INTO t1 VALUES(12,'Bangalore');
INSERT INTO t1 VALUES(12,'Housar');
INSERT INTO t1 VALUES(12,'Housar');
INSERT INTO t1 VALUES(13,'Hyderabad');
INSERT INTO t1 VALUES(13,'Hyderabad');
INSERT INTO t1 VALUES(13,'Secundarabad');
INSERT INTO t1 VALUES(13,'Secundarabad');
INSERT INTO t1 VALUES(13,'Secundarabad');



